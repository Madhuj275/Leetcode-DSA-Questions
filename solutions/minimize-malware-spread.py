# Problem: Minimize Malware Spread
# Difficulty: Unknown
# Solution:

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parent = list(range(n))
        
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                parent[rootY] = rootX

        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)

        component_size = defaultdict(int)
        for i in range(n):
            root = find(i)
            component_size[root] += 1

        infected_count = defaultdict(int)
        for node in initial:
            root = find(node)
            infected_count[root] += 1

        res = -1
        max_saved = -1
        for node in sorted(initial):
            root = find(node)
            if infected_count[root] == 1:
                saved = component_size[root]
                if saved > max_saved:
                    max_saved = saved
                    res = node

        return res if res != -1 else min(initial)